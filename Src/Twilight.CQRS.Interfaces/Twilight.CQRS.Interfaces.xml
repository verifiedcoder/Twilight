<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Twilight.CQRS.Interfaces</name>
    </assembly>
    <members>
        <member name="T:Twilight.CQRS.Interfaces.ICqrsCommand">
            <summary>
                <para>Represents a message of type command.</para>
                <para>Implements <see cref="T:Twilight.CQRS.Interfaces.ICqrsMessage" />.</para>
            </summary>
            <seealso cref="T:Twilight.CQRS.Interfaces.ICqrsMessage" />
        </member>
        <member name="T:Twilight.CQRS.Interfaces.ICqrsCommand`1">
            <summary>
                <para>Represents a message of type command with a response of arbitrary type.</para>
                <para>Implements <see cref="T:Twilight.CQRS.Interfaces.ICqrsMessage" />.</para>
            </summary>
            <typeparam name="TResponse">The type of the response payload.</typeparam>
            <seealso cref="T:Twilight.CQRS.Interfaces.ICqrsMessage" />
        </member>
        <member name="T:Twilight.CQRS.Interfaces.ICqrsCommandHandler`1">
            <summary>
                Represents a means of handling a command in order to broker a result.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
        </member>
        <member name="M:Twilight.CQRS.Interfaces.ICqrsCommandHandler`1.Handle(`0,System.Threading.CancellationToken)">
            <summary>
                Handles the command.
            </summary>
            <param name="command">The command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous command handler operation.</returns>
        </member>
        <member name="T:Twilight.CQRS.Interfaces.ICqrsCommandHandler`2">
            <summary>
                Represents a command message handler.
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
        </member>
        <member name="M:Twilight.CQRS.Interfaces.ICqrsCommandHandler`2.Handle(`0,System.Threading.CancellationToken)">
            <summary>
                Handles the command.
            </summary>
            <param name="command">The command.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
                <para>A task that represents the asynchronous command handler operation.</para>
                <para>The task result contains the command execution response.</para>
            </returns>
        </member>
        <member name="T:Twilight.CQRS.Interfaces.ICqrsEvent">
            <summary>
                <para>Represents a message of type event.</para>
                <para>Implements <see cref="T:Twilight.CQRS.Interfaces.ICqrsMessage" />.</para>
            </summary>
            <seealso cref="T:Twilight.CQRS.Interfaces.ICqrsMessage" />
        </member>
        <member name="T:Twilight.CQRS.Interfaces.ICqrsEventHandler`1">
            <summary>
                Represents a means of handling an event in order to broker a result.
            </summary>
            <typeparam name="TEvent">The type of the event.</typeparam>
        </member>
        <member name="M:Twilight.CQRS.Interfaces.ICqrsEventHandler`1.Handle(`0,System.Threading.CancellationToken)">
            <summary>
                Handles the event.
            </summary>
            <param name="event">The event.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous event handler operation.</returns>
        </member>
        <member name="T:Twilight.CQRS.Interfaces.ICqrsMessage">
            <summary>
                Represents base properties for messages. This class cannot be instantiated.
            </summary>
        </member>
        <member name="P:Twilight.CQRS.Interfaces.ICqrsMessage.MessageId">
            <summary>
                Gets the message identifier.
            </summary>
            <value>The message identifier.</value>
        </member>
        <member name="P:Twilight.CQRS.Interfaces.ICqrsMessage.CorrelationId">
            <summary>
                Gets the correlation identifier.
            </summary>
            <value>The message correlation identifier.</value>
        </member>
        <member name="P:Twilight.CQRS.Interfaces.ICqrsMessage.CausationId">
            <summary>
                Gets the causation identifier.
            </summary>
            <remarks>Identifies the message (by that message's identifier) that caused a message instance to be produced.</remarks>
            <value>The causation identifier.</value>
        </member>
        <member name="T:Twilight.CQRS.Interfaces.ICqrsMessageHandler`1">
            <summary>
                Represents base message handling functionality. This class cannot be inherited.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
        </member>
        <member name="M:Twilight.CQRS.Interfaces.ICqrsMessageHandler`1.OnBeforeHandling(`0,System.Threading.CancellationToken)">
            <summary>
                Occurs before handling a message.
            </summary>
            <param name="message">The message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Twilight.CQRS.Interfaces.ICqrsMessageHandler`1.ValidateMessage(`0,System.Threading.CancellationToken)">
            <summary>
                Occurs when validating a message.
            </summary>
            <param name="message">The message to be validated.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Twilight.CQRS.Interfaces.ICqrsMessageHandler`1.OnAfterHandling(`0,System.Threading.CancellationToken)">
            <summary>
                Occurs when handling a message has completed.
            </summary>
            <param name="message">The message.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Twilight.CQRS.Interfaces.ICqrsQuery`1">
            <summary>
                <para>Represents a message of type query with a response of arbitrary type.</para>
                <para>Implements <see cref="T:Twilight.CQRS.Interfaces.ICqrsMessage" />.</para>
            </summary>
            <typeparam name="TResponse">The type of the response payload.</typeparam>
            <seealso cref="T:Twilight.CQRS.Interfaces.ICqrsMessage" />
        </member>
        <member name="T:Twilight.CQRS.Interfaces.ICqrsQueryHandler`2">
            <summary>
                Represents a query message handler.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
        </member>
        <member name="M:Twilight.CQRS.Interfaces.ICqrsQueryHandler`2.Handle(`0,System.Threading.CancellationToken)">
            <summary>
                Handles the query.
            </summary>
            <param name="query">The query.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
                <para>A task that represents the asynchronous query handler operation.</para>
                <para>The task result contains the query execution response.</para>
            </returns>
        </member>
    </members>
</doc>
